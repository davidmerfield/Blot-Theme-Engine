var moment = require('moment');
var winston = require('winston');
var chalk = require('chalk');

var flags = {'-d': 'debug', '-e': 'error'};
var level = 'info';

for (var i in flags)
  if (process.argv.indexOf(i) > -1)
    level = flags[i];

var colorlevel = {
  'EMERGENCY': 'red',
  'ALERT': 'red',
  'CRITICAL': 'red',
  'ERROR': 'red',
  'WARNING': 'yellow',
  'NOTICE': 'green',
  'INFO': 'dim',
  'DEBUG': 'dim'
};

var aliases = {
  'warning': 'WARN',
}

function pad (len, str) {
  while (str.length < len) str = ' ' + str;
  return str;
}

var log = new (winston.Logger)({
  levels: {emergency: 0, alert: 1, critical: 2, error: 3, warning: 4, notice: 5, info: 6, debug: 7 }
,
  transports: [
    new (winston.transports.Console)({
      timestamp: function() {
        return Date.now();
      },
      formatter: function(options) {
        return [
          chalk.dim('[' + moment.utc(options.timestamp()).format('YYYY-MM-DD HH:mm:ss SSS') + ']'),
          chalk[colorlevel[options.level.toUpperCase()]](pad('ERROR'.length, aliases[options.level] || options.level.toUpperCase())),
          options.message || '',
          (options.meta && Object.keys(options.meta).length ? '\n\t'+ JSON.stringify(options.meta) : '')
        ].join(' ').trim();
      }
    })
  ]
});

log.level = level;

// log.error('UH OH');
// log.info('Hello world!', 'dammit', {foo:'bar'});
// log.debug('What about debug');
// log.warning('What about debug');
// log.info(chalk.green('Fake test passed'));

var timers = {};

log.time = function (label) {
  timers[label] = Date.now();
};

log.timeEnd = function(label) {

  var duration;

  if (timers[label] === undefined)
    return log.error('No existing timer with label', label, new Error().stack);

  duration = Date.now() - timers[label];
  log.debug(label,'took', duration,'ms');
};



module.exports = log;
